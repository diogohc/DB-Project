/**Criacao de tabelas*/
CREATE TABLE utilizador (
	userid			 INTEGER UNIQUE NOT NULL,
	username			 VARCHAR(15) UNIQUE NOT NULL,
	password			 VARCHAR(15) NOT NULL,
	email			 VARCHAR(15) UNIQUE NOT NULL,
	banido			 BOOL DEFAULT False,
	administrador		 BOOL DEFAULT False,
	vendedor_nrleiloescriados	 INTEGER DEFAULT 0,
	comprador_nrleiloesvencidos INTEGER DEFAULT 0,
	PRIMARY KEY(userid)
);

CREATE TABLE leilao_artigo (
	leilaoid		 INTEGER,
	horatermino	 TIMESTAMP,
	titulo		 VARCHAR(30) NOT NULL,
	maiorprecolicitado FLOAT(8) DEFAULT 0,
	leilaoativo	 BOOL NOT NULL DEFAULT True,
	leilaocancelado	 BOOL DEFAULT False,
	artigo_ean	 INTEGER UNIQUE NOT NULL,
	artigo_precomin	 FLOAT(8) NOT NULL,
	artigo_descricao	 TEXT,
	utilizador_userid	 INTEGER NOT NULL,
	PRIMARY KEY(leilaoid)
);

CREATE TABLE licitacao (
	valor			 FLOAT(8),
	invalida		 BOOL DEFAULT False,
	leilao_artigo_leilaoid INTEGER NOT NULL,
	utilizador_userid	 INTEGER NOT NULL
);

CREATE TABLE mensagem (
	mensagemid		 INTEGER,
	text			 TEXT,
	leilao_artigo_leilaoid INTEGER NOT NULL,
	utilizador_userid	 INTEGER NOT NULL,
	PRIMARY KEY(mensagemid)
);

CREATE TABLE notificacoes (
	text		 TEXT,
	utilizador_userid INTEGER NOT NULL
);

CREATE TABLE leilao_editado (
	titulo		 TEXT NOT NULL,
	descricao		 TEXT,
	leilao_artigo_leilaoid INTEGER NOT NULL
);

ALTER TABLE leilao_artigo ADD CONSTRAINT leilao_artigo_fk1 FOREIGN KEY (utilizador_userid) REFERENCES utilizador(userid);
ALTER TABLE licitacao ADD CONSTRAINT licitacao_fk1 FOREIGN KEY (leilao_artigo_leilaoid) REFERENCES leilao_artigo(leilaoid);
ALTER TABLE licitacao ADD CONSTRAINT licitacao_fk2 FOREIGN KEY (utilizador_userid) REFERENCES utilizador(userid);
ALTER TABLE mensagem ADD CONSTRAINT mensagem_fk1 FOREIGN KEY (leilao_artigo_leilaoid) REFERENCES leilao_artigo(leilaoid);
ALTER TABLE mensagem ADD CONSTRAINT mensagem_fk2 FOREIGN KEY (utilizador_userid) REFERENCES utilizador(userid);
ALTER TABLE notificacoes ADD CONSTRAINT notificacoes_fk1 FOREIGN KEY (utilizador_userid) REFERENCES utilizador(userid);
ALTER TABLE leilao_editado ADD CONSTRAINT leilao_editado_fk1 FOREIGN KEY (leilao_artigo_leilaoid) REFERENCES leilao_artigo(leilaoid);



/*Sequences*/
-- Column: public.leilao_artigo.leilaoid

ALTER TABLE public.leilao_artigo DROP COLUMN leilaoid;

ALTER TABLE public.leilao_artigo
    ADD COLUMN leilaoid integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 );


-- Column: public.mensagem.mensagemid

ALTER TABLE public.mensagem DROP COLUMN mensagemid;

ALTER TABLE public.mensagem
    ADD COLUMN mensagemid integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 );


-- Column: public.utilizador.userid

ALTER TABLE public.utilizador DROP COLUMN userid;

ALTER TABLE public.utilizador
    ADD COLUMN userid integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 );


/*constraints*/
-- Constraint: leilao_editado_fk1

 ALTER TABLE public.leilao_editado DROP CONSTRAINT leilao_editado_fk1;

ALTER TABLE public.leilao_editado
    ADD CONSTRAINT leilao_editado_fk1 FOREIGN KEY (leilao_artigo_leilaoid)
    REFERENCES public.leilao_artigo (leilaoid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


-- Constraint: licitacao_fk1

 ALTER TABLE public.licitacao DROP CONSTRAINT licitacao_fk1;

ALTER TABLE public.licitacao
    ADD CONSTRAINT licitacao_fk1 FOREIGN KEY (leilao_artigo_leilaoid)
    REFERENCES public.leilao_artigo (leilaoid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


-- Constraint: licitacao_fk2

ALTER TABLE public.licitacao DROP CONSTRAINT licitacao_fk2;

ALTER TABLE public.licitacao
    ADD CONSTRAINT licitacao_fk2 FOREIGN KEY (utilizador_userid)
    REFERENCES public.utilizador (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
	


-- Constraint: mensagem_fk1

 ALTER TABLE public.mensagem DROP CONSTRAINT mensagem_fk1;

ALTER TABLE public.mensagem
    ADD CONSTRAINT mensagem_fk1 FOREIGN KEY (leilao_artigo_leilaoid)
    REFERENCES public.leilao_artigo (leilaoid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


-- Constraint: mensagem_fk2

 ALTER TABLE public.mensagem DROP CONSTRAINT mensagem_fk2;

ALTER TABLE public.mensagem
    ADD CONSTRAINT mensagem_fk2 FOREIGN KEY (utilizador_userid)
    REFERENCES public.utilizador (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
	

-- Constraint: leilao_artigo_fk1

ALTER TABLE public.leilao_artigo DROP CONSTRAINT leilao_artigo_fk1;

ALTER TABLE public.leilao_artigo
    ADD CONSTRAINT leilao_artigo_fk1 FOREIGN KEY (utilizador_userid)
    REFERENCES public.utilizador (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


-- Constraint: notificacoes_fk1

 ALTER TABLE public.notificacoes DROP CONSTRAINT notificacoes_fk1;

ALTER TABLE public.notificacoes
    ADD CONSTRAINT notificacoes_fk1 FOREIGN KEY (utilizador_userid)
    REFERENCES public.utilizador (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;





/*Funcoes*/


-- FUNCTION: public.func_edicao(text, text, integer, integer)

-- DROP FUNCTION public.func_edicao(text, text, integer, integer);

CREATE OR REPLACE FUNCTION public.func_edicao(
	p_titulo text,
	p_descricao text,
	p_leilaoid integer,
	p_userid integer)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
declare
    linha leilao_artigo%rowtype;
	v_titulo text;
	v_artigo_descricao text;
	v_max_leilaoid integer;
    begin
    select * into linha from leilao_artigo where leilaoid=p_leilaoid for update;
    if (count(linha.leilaoid)=0) then 
        return 'Nao existem leiloes correspondentes ao leilaoid';
    elsif (linha.utilizador_userid!=p_userid) then
        return 'Não criou este leilão, não pode editar';
	end if;
	select titulo into v_titulo from leilao_artigo where leilaoid = p_leilaoid;
	select artigo_descricao into v_artigo_descricao from leilao_artigo where leilaoid = p_leilaoid;
	INSERT INTO leilao_editado (titulo, descricao, leilao_artigo_leilaoid) VALUES (v_titulo,v_artigo_descricao,p_leilaoid);
	select max(leilaoid) into v_max_leilaoid from leilao_artigo;
	v_max_leilaoid = v_max_leilaoid + 1;
    if (p_titulo = 'null') then
		UPDATE leilao_artigo SET artigo_descricao = p_descricao, leilaoid = v_max_leilaoid  WHERE leilaoid = p_leilaoid;
        return '1';
    elsif (p_descricao = 'null') then
        UPDATE leilao_artigo SET titulo = p_titulo, leilaoid = v_max_leilaoid  WHERE leilaoid = p_leilaoid;
        return '1';
    else
        UPDATE leilao_artigo SET titulo = p_titulo, artigo_descricao = p_descricao, leilaoid = v_max_leilaoid  WHERE leilaoid = p_leilaoid;
	return '1';
    end if;
    
    end;
$BODY$;

ALTER FUNCTION public.func_edicao(text, text, integer, integer)
    OWNER TO postgres;






-- FUNCTION: public.func_licitacao(integer, real, integer)

-- DROP FUNCTION public.func_licitacao(integer, real, integer);

CREATE OR REPLACE FUNCTION public.func_licitacao(
	p_userid integer,
	p_valor real,
	p_leilaoid integer)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
declare
    linha leilao_artigo%rowtype;
    begin
    select * into linha from leilao_artigo where leilaoid=p_leilaoid for update;
    if (count(linha.leilaoid)=0) then 
        return 'Nao existem leiloes correspondentes ao leilaoid';
    elsif (linha.utilizador_userid=p_userid) then
        return 'Nao pode licitar no leilao que criou';
    elsif (linha.leilaoativo=false) then
        return 'Leilao ja acabou';
    elsif (p_valor<linha.artigo_precomin) then
        return 'Licitacao abaixo do preco minimo';
    elsif (p_valor<= linha.maiorprecolicitado) then
        return 'Licitacao abaixo do maior preco licitado';
    end if;
    insert into licitacao (valor,leilao_artigo_leilaoid,utilizador_userid) values (p_valor, linha.leilaoid, p_userid);
    update leilao_artigo set maiorprecolicitado = p_valor where leilao_artigo.leilaoid=p_leilaoid;
    return 'Sucesso';
    end;
$BODY$;

ALTER FUNCTION public.func_licitacao(integer, real, integer)
    OWNER TO postgres;




/*Procedimentos*/
-- PROCEDURE: public.terminar_leiloes()

-- DROP PROCEDURE public.terminar_leiloes();

CREATE OR REPLACE PROCEDURE public.terminar_leiloes(
	)
LANGUAGE 'plpgsql'
AS $BODY$
declare
	c1 cursor for
	select leilaoid
	from leilao_artigo
	where horatermino<current_timestamp;
	v_leilaoid numeric;
	begin
	open c1;
	loop
		fetch c1 into v_leilaoid;
		exit when not found;	--loop acaba quando o fetch nao devolver nada
		update leilao_artigo set leilaoativo=false where leilao_artigo.leilaoid=v_leilaoid;
	end loop;
end;
$BODY$;


/*Triggers*/
-- FUNCTION: public.trigger_licitacao_notificacao()

-- DROP FUNCTION public.trigger_licitacao_notificacao();

CREATE FUNCTION public.trigger_licitacao_notificacao()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
declare
    c3 cursor for
    select distinct(utilizador_userid) from licitacao where leilao_artigo_leilaoid = new.leilao_artigo_leilaoid and utilizador_userid != (new.utilizador_userid);
	v_userid numeric;
begin
	open c3;
	loop
		fetch c3 into v_userid;
		exit when not found;
		insert into notificacoes (text, utilizador_userid) values (concat('Licitacao ultrapassada no leilao com o id ',new.leilao_artigo_leilaoid, ' com o valor ',new.valor), v_userid);
	end loop;
	return NULL;
end;
$BODY$;

ALTER FUNCTION public.trigger_licitacao_notificacao()
    OWNER TO postgres;


create trigger tai_licitacao
after insert on licitacao
for each row
execute procedure trigger_licitacao_notificacao();



-- FUNCTION: public.trigger_mensagem_notificacao()

-- DROP FUNCTION public.trigger_mensagem_notificacao();

CREATE FUNCTION public.trigger_mensagem_notificacao()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
declare
    c2 cursor for
    select distinct(utilizador_userid) 
	from mensagem 
	where leilao_artigo_leilaoid = new.leilao_artigo_leilaoid and utilizador_userid != (new.utilizador_userid);
	v_userid numeric;
	v_criadorid numeric;
	v_check boolean:= false;
begin
	open c2;
	select utilizador_userid into v_criadorid from leilao_artigo where leilaoid = new.leilao_artigo_leilaoid;
	loop
		fetch c2 into v_userid;
		exit when not found;
		insert into notificacoes (text, utilizador_userid) values ((concat('Mensagem Nova no leilao ', new.leilao_artigo_leilaoid, ' : ',new.text)), v_userid);
		if v_userid = v_criadorid then
			v_check = true;
		end if;
	end loop;
	if v_check = false then
		insert into notificacoes (text, utilizador_userid) values ((concat('Mensagem Nova no leilao ', new.leilao_artigo_leilaoid, ' : ',new.text)), v_criadorid);
	end if;
	return NULL;
end;
$BODY$;

ALTER FUNCTION public.trigger_mensagem_notificacao()
    OWNER TO postgres;



create trigger tai_mensagem
after insert on mensagem
for each row
execute procedure trigger_mensagem_notificacao();


/*Inserts*/
insert into leilao_artigo (horatermino, titulo, artigo_ean, artigo_precomin, artigo_descricao, utilizador_userid) 
values('2021-06-01 18:18:00', 'titulo1', 1, 100, 'descricao1', 1);

insert into leilao_artigo (horatermino, titulo, artigo_ean, artigo_precomin, artigo_descricao, utilizador_userid) 
values('2021-06-02 18:18:00', 'titulo2', 2, 200, 'descricao2', 2);


insert into utilizador (username, password, email)
values('username1', 'password1', 'email1');

insert into utilizador (username, password, email)
values('username2', 'password2', 'email2');



